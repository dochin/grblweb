#!/bin/sh
#
# The MIT License
# Copyright (c) 2013, 2015 Reason [reason -A- exratione.com], Jason Campbell dochin@campound.org
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# An init.d script for running grblweb as a service using Forever as
# the process monitor. For more configuration options associated with Forever,
# see: https://github.com/nodejitsu/forever
#
# This was written for Debian, but may work on other distributions.  
# So, use at your own risk.
#
### BEGIN INIT INFO
# Provides:             grblweb
# Required-Start:       $syslog $remote_fs
# Required-Stop:        $syslog $remote_fs
# Should-Start:         $local_fs
# Should-Stop:          $local_fs
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    GRBLWeb CNC Controller
# Description:          Control a CNC machine running GRBL through a web interface.  See .config.js for server configuration.  Default port 8000
### END INIT INFO
#
### BEGIN CHKCONFIG INFO
# chkconfig: 2345 55 25
# description: My Application
### END CHKCONFIG INFO
#
# Based on:
# https://gist.github.com/3748766
# https://github.com/hectorcorrea/hectorcorrea.com/blob/master/etc/forever-initd-hectorcorrea.sh
# https://www.exratione.com/2011/07/running-a-nodejs-server-as-a-service-using-forever/

#-------SETTINGS--------

#UID for forever to identify the script
NAME="grblweb"

#The path where node binaries and node modules are installed
NODE_BIN_DIR="/usr/bin"
NODE_PATH="/usr/lib/node_modules"

#The path where grblweb is installed and the name of the grblweb server script
APPLICATION_PATH="/usr/lib/node_modules/grblweb"
APPLICATION_SCRIPT="server.js"

#System user account that will run the daemon.  This user has to have a home directory and shell access
RUN_USER="mill"

#PID and log file.  For a normal node.js installation these will end up in ~/.forever/pid and ~/.forever.  By default these will use the process UID
PIDFILE="$NAME.pid"
LOGFILE="$NAME.log"

#See forever documentation for details.
MIN_UPTIME="5000"
SPIN_SLEEP_TIME="2000"

#---------------------
 
# Add node to the path for situations in which the environment is passed.
PATH=$NODE_BIN_DIR:$PATH
# Export all environment variables that must be visible for the Node.js
# application process forked by Forever. It will not see any of the other
# variables defined in this script.
export NODE_PATH=$NODE_PATH
 
start() {
    echo "Starting $NAME"
    # We're calling forever directly without using start-stop-daemon for the
    # sake of simplicity when it comes to environment, and because this way
    # the script will work whether it is executed directly or via the service
    # utility.
    #
    # The minUptime and spinSleepTime settings stop Forever from thrashing if
    # the application fails immediately on launch. This is generally necessary to
    # avoid loading development servers to the point of failure every time
    # someone makes an error in application initialization code, or bringing down
    # production servers the same way if a database or other critical service
    # suddenly becomes inaccessible.
    #
    # The pidfile contains the child process pid, not the forever process pid.
    # We're only using it as a marker for whether or not the process is
    # running.
    #
    # Note that redirecting the output to /dev/null (or anywhere) is necessary
    # to make this script work if provisioning the service via Chef.

#First, check to see if grblweb is already running.
if [ "$USER" = "$RUN_USER" ]; then
	echo `forever list` | grep -q "$NAME"
else
        su -c "echo \`forever list\` | grep -q \"$NAME\"" $RUN_USER	
fi
if [ "$?" -eq "0" ]; then
	echo "grblweb is already running."
	RETVAL=1
else	
	if [ "$RUN_USER" = "$USER" ]; then
	
	    $NODE_BIN_DIR/forever \
	      --pidFile $PIDFILE \
	      -a \
	      -l $LOGFILE \
	      --minUptime $MIN_UPTIME \
	      --spinSleepTime $SPIN_SLEEP_TIME \
	      --sourceDir $APPLICATION_PATH \
	      --workingDir $APPLICATION_PATH \
	      --uid "$NAME" \
	      start $APPLICATION_SCRIPT 2>&1 > /dev/null &
	    RETVAL=$?
	else
	    su -c "$NODE_BIN_DIR/forever \
	      --pidFile $PIDFILE \
	      -a \
	      -l $LOGFILE \
	      --minUptime $MIN_UPTIME \
	      --spinSleepTime $SPIN_SLEEP_TIME \
	      --sourceDir $APPLICATION_PATH \
	      --workingDir $APPLICATION_PATH \
	      --uid "$NAME" \
	      start $APPLICATION_SCRIPT 2>&1 > /dev/null &" \
	      $RUN_USER
	    RETVAL=$?
	fi
fi
}

stop() {
    if [ "$USER" = "$RUN_USER" ]; then
	echo `forever list` | grep -q "$NAME"
	if [ "$?" -eq "0" ]; then
        	echo "Shutting down $NAME"
		# Tell Forever to stop the process.
	        forever stop $NAME 2>&1 > /dev/null
	        # Get rid of the pidfile, since Forever won't do that.
	        rm -f $PIDFILE
		RETVAL=$?
	else
        	echo "$NAME is not running."
	        RETVAL=0
	fi


    else
    	su -c "echo \`forever list\` | grep -q \"$NAME\"" $RUN_USER
        if [ "$?" -eq "0" ]; then
                echo "Shutting down $NAME"
                # Tell Forever to stop the process.
                su -c "forever stop $NAME 2>&1 > /dev/null" $RUN_USER
                # Get rid of the pidfile, since Forever won't do that.
                rm -f $PIDFILE
                RETVAL=$?
        else
                echo "$NAME is not running."
                RETVAL=0
        fi

    fi

}
 
restart() {
    stop
    start
}
 
status() {
    if [ "$USER" = "$RUN_USER" ]; then
        echo `forever list` | grep -q "$NAME"
    else
        su -c "echo \`forever list\` | grep -q \"$NAME\"" $RUN_USER
    fi

    if [ "$?" -eq "0" ]; then
        echo "$NAME is running."
        RETVAL=0
    else
        echo "$NAME is not running."
        RETVAL=3
    fi
}
 
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usage: {start|stop|status|restart}"
        exit 1
        ;;
esac
exit $RETVAL

